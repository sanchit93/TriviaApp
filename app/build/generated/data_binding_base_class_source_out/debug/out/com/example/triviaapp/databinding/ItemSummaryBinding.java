// Generated by view binder compiler. Do not edit!
package com.example.triviaapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.triviaapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemSummaryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView tvAns1;

  @NonNull
  public final TextView tvAns2;

  @NonNull
  public final TextView tvAnswerLabel;

  @NonNull
  public final TextView tvName;

  @NonNull
  public final TextView tvQuest1;

  @NonNull
  public final TextView tvQuest2;

  @NonNull
  public final TextView tvTime;

  private ItemSummaryBinding(@NonNull LinearLayout rootView, @NonNull TextView tvAns1,
      @NonNull TextView tvAns2, @NonNull TextView tvAnswerLabel, @NonNull TextView tvName,
      @NonNull TextView tvQuest1, @NonNull TextView tvQuest2, @NonNull TextView tvTime) {
    this.rootView = rootView;
    this.tvAns1 = tvAns1;
    this.tvAns2 = tvAns2;
    this.tvAnswerLabel = tvAnswerLabel;
    this.tvName = tvName;
    this.tvQuest1 = tvQuest1;
    this.tvQuest2 = tvQuest2;
    this.tvTime = tvTime;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemSummaryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemSummaryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_summary, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemSummaryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.tvAns1;
      TextView tvAns1 = rootView.findViewById(id);
      if (tvAns1 == null) {
        break missingId;
      }

      id = R.id.tvAns2;
      TextView tvAns2 = rootView.findViewById(id);
      if (tvAns2 == null) {
        break missingId;
      }

      id = R.id.tvAnswerLabel;
      TextView tvAnswerLabel = rootView.findViewById(id);
      if (tvAnswerLabel == null) {
        break missingId;
      }

      id = R.id.tvName;
      TextView tvName = rootView.findViewById(id);
      if (tvName == null) {
        break missingId;
      }

      id = R.id.tvQuest1;
      TextView tvQuest1 = rootView.findViewById(id);
      if (tvQuest1 == null) {
        break missingId;
      }

      id = R.id.tvQuest2;
      TextView tvQuest2 = rootView.findViewById(id);
      if (tvQuest2 == null) {
        break missingId;
      }

      id = R.id.tvTime;
      TextView tvTime = rootView.findViewById(id);
      if (tvTime == null) {
        break missingId;
      }

      return new ItemSummaryBinding((LinearLayout) rootView, tvAns1, tvAns2, tvAnswerLabel, tvName,
          tvQuest1, tvQuest2, tvTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
