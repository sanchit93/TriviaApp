// Generated by Dagger (https://dagger.dev).
package com.example.triviaapp.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.example.testlocationapp.error.ErrorHandler;
import com.example.triviaapp.TriviaApp;
import com.example.triviaapp.base.BaseActivity_MembersInjector;
import com.example.triviaapp.base.BaseFragment_MembersInjector;
import com.example.triviaapp.base.DaggerBaseActivity_MembersInjector;
import com.example.triviaapp.repo.DatabaseRepositoryImpl;
import com.example.triviaapp.repo.DatabaseRepositoryImpl_Factory;
import com.example.triviaapp.room.AppDatabase;
import com.example.triviaapp.room.UserDao;
import com.example.triviaapp.ui.HistoryActivity;
import com.example.triviaapp.ui.MainActivity;
import com.example.triviaapp.ui.SummaryActivity;
import com.example.triviaapp.ui.UserNameFragment;
import com.example.triviaapp.ui.game.GameFragment1;
import com.example.triviaapp.ui.game.GameFragment2;
import com.example.triviaapp.ui.splash.SplashActivity;
import com.example.triviaapp.ui.viewmodel.MainViewModel;
import com.example.triviaapp.ui.viewmodel.MainViewModel_Factory;
import com.example.triviaapp.ui.viewmodel.SummaryViewModel;
import com.example.triviaapp.ui.viewmodel.SummaryViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBindingModule_MainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_SummaryActivity.SummaryActivitySubcomponent.Factory> summaryActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_HistoryActivity.HistoryActivitySubcomponent.Factory> historyActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_SplashActivity.SplashActivitySubcomponent.Factory> splashActivitySubcomponentFactoryProvider;

  private Provider<FragmentBindingModule_UserFragment.UserNameFragmentSubcomponent.Factory> userNameFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBindingModule_GameFragment1.GameFragment1Subcomponent.Factory> gameFragment1SubcomponentFactoryProvider;

  private Provider<FragmentBindingModule_GameFragment2.GameFragment2Subcomponent.Factory> gameFragment2SubcomponentFactoryProvider;

  private Provider<TriviaApp> applicationProvider;

  private Provider<Context> provideContext$app_debugProvider;

  private Provider<ErrorHandlerImpl> errorHandlerImplProvider;

  private Provider<ErrorHandler> providesErrorHandler$app_debugProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private Provider<UserDao> provideUserDaoProvider;

  private Provider<DatabaseRepositoryImpl> databaseRepositoryImplProvider;

  private Provider<MainViewModel> mainViewModelProvider;

  private Provider<SummaryViewModel> summaryViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(TriviaApp applicationParam) {

    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(7).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(SummaryActivity.class, (Provider) summaryActivitySubcomponentFactoryProvider).put(HistoryActivity.class, (Provider) historyActivitySubcomponentFactoryProvider).put(SplashActivity.class, (Provider) splashActivitySubcomponentFactoryProvider).put(UserNameFragment.class, (Provider) userNameFragmentSubcomponentFactoryProvider).put(GameFragment1.class, (Provider) gameFragment1SubcomponentFactoryProvider).put(GameFragment2.class, (Provider) gameFragment2SubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final TriviaApp applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_MainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_MainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.summaryActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_SummaryActivity.SummaryActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_SummaryActivity.SummaryActivitySubcomponent.Factory get() {
        return new SummaryActivitySubcomponentFactory();
      }
    };
    this.historyActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_HistoryActivity.HistoryActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_HistoryActivity.HistoryActivitySubcomponent.Factory get() {
        return new HistoryActivitySubcomponentFactory();
      }
    };
    this.splashActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_SplashActivity.SplashActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_SplashActivity.SplashActivitySubcomponent.Factory get() {
        return new SplashActivitySubcomponentFactory();
      }
    };
    this.userNameFragmentSubcomponentFactoryProvider = new Provider<FragmentBindingModule_UserFragment.UserNameFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBindingModule_UserFragment.UserNameFragmentSubcomponent.Factory get() {
        return new UserNameFragmentSubcomponentFactory();
      }
    };
    this.gameFragment1SubcomponentFactoryProvider = new Provider<FragmentBindingModule_GameFragment1.GameFragment1Subcomponent.Factory>() {
      @Override
      public FragmentBindingModule_GameFragment1.GameFragment1Subcomponent.Factory get() {
        return new GameFragment1SubcomponentFactory();
      }
    };
    this.gameFragment2SubcomponentFactoryProvider = new Provider<FragmentBindingModule_GameFragment2.GameFragment2Subcomponent.Factory>() {
      @Override
      public FragmentBindingModule_GameFragment2.GameFragment2Subcomponent.Factory get() {
        return new GameFragment2SubcomponentFactory();
      }
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContext$app_debugProvider = ContextModule_ProvideContext$app_debugFactory.create(applicationProvider);
    this.errorHandlerImplProvider = ErrorHandlerImpl_Factory.create(provideContext$app_debugProvider);
    this.providesErrorHandler$app_debugProvider = DoubleCheck.provider(ErrorModule_ProvidesErrorHandler$app_debugFactory.create(errorHandlerImplProvider));
    this.provideAppDatabaseProvider = DoubleCheck.provider(AppModule_ProvideAppDatabaseFactory.create(provideContext$app_debugProvider));
    this.provideUserDaoProvider = DoubleCheck.provider(AppModule_ProvideUserDaoFactory.create(provideAppDatabaseProvider));
    this.databaseRepositoryImplProvider = DatabaseRepositoryImpl_Factory.create(provideUserDaoProvider);
    this.mainViewModelProvider = MainViewModel_Factory.create(databaseRepositoryImplProvider);
    this.summaryViewModelProvider = SummaryViewModel_Factory.create(databaseRepositoryImplProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2).put(MainViewModel.class, (Provider) mainViewModelProvider).put(SummaryViewModel.class, (Provider) summaryViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(TriviaApp arg0) {
    injectTriviaApp(arg0);
  }

  private TriviaApp injectTriviaApp(TriviaApp instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private TriviaApp application;

    @Override
    public Builder application(TriviaApp application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, TriviaApp.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBindingModule_MainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_MainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBindingModule_MainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectErrorHandler(instance, DaggerAppComponent.this.providesErrorHandler$app_debugProvider.get());
      DaggerBaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      DaggerBaseActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private final class SummaryActivitySubcomponentFactory implements ActivityBindingModule_SummaryActivity.SummaryActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_SummaryActivity.SummaryActivitySubcomponent create(
        SummaryActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SummaryActivitySubcomponentImpl(arg0);
    }
  }

  private final class SummaryActivitySubcomponentImpl implements ActivityBindingModule_SummaryActivity.SummaryActivitySubcomponent {
    private SummaryActivitySubcomponentImpl(SummaryActivity arg0) {

    }

    @Override
    public void inject(SummaryActivity arg0) {
      injectSummaryActivity(arg0);
    }

    private SummaryActivity injectSummaryActivity(SummaryActivity instance) {
      BaseActivity_MembersInjector.injectErrorHandler(instance, DaggerAppComponent.this.providesErrorHandler$app_debugProvider.get());
      DaggerBaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      DaggerBaseActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private final class HistoryActivitySubcomponentFactory implements ActivityBindingModule_HistoryActivity.HistoryActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_HistoryActivity.HistoryActivitySubcomponent create(
        HistoryActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new HistoryActivitySubcomponentImpl(arg0);
    }
  }

  private final class HistoryActivitySubcomponentImpl implements ActivityBindingModule_HistoryActivity.HistoryActivitySubcomponent {
    private HistoryActivitySubcomponentImpl(HistoryActivity arg0) {

    }

    @Override
    public void inject(HistoryActivity arg0) {
      injectHistoryActivity(arg0);
    }

    private HistoryActivity injectHistoryActivity(HistoryActivity instance) {
      BaseActivity_MembersInjector.injectErrorHandler(instance, DaggerAppComponent.this.providesErrorHandler$app_debugProvider.get());
      DaggerBaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      DaggerBaseActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private final class SplashActivitySubcomponentFactory implements ActivityBindingModule_SplashActivity.SplashActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_SplashActivity.SplashActivitySubcomponent create(
        SplashActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SplashActivitySubcomponentImpl(arg0);
    }
  }

  private final class SplashActivitySubcomponentImpl implements ActivityBindingModule_SplashActivity.SplashActivitySubcomponent {
    private SplashActivitySubcomponentImpl(SplashActivity arg0) {

    }

    @Override
    public void inject(SplashActivity arg0) {
    }
  }

  private final class UserNameFragmentSubcomponentFactory implements FragmentBindingModule_UserFragment.UserNameFragmentSubcomponent.Factory {
    @Override
    public FragmentBindingModule_UserFragment.UserNameFragmentSubcomponent create(
        UserNameFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new UserNameFragmentSubcomponentImpl(arg0);
    }
  }

  private final class UserNameFragmentSubcomponentImpl implements FragmentBindingModule_UserFragment.UserNameFragmentSubcomponent {
    private UserNameFragmentSubcomponentImpl(UserNameFragment arg0) {

    }

    @Override
    public void inject(UserNameFragment arg0) {
      injectUserNameFragment(arg0);
    }

    private UserNameFragment injectUserNameFragment(UserNameFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      BaseFragment_MembersInjector.injectErrorHandler(instance, DaggerAppComponent.this.providesErrorHandler$app_debugProvider.get());
      return instance;
    }
  }

  private final class GameFragment1SubcomponentFactory implements FragmentBindingModule_GameFragment1.GameFragment1Subcomponent.Factory {
    @Override
    public FragmentBindingModule_GameFragment1.GameFragment1Subcomponent create(
        GameFragment1 arg0) {
      Preconditions.checkNotNull(arg0);
      return new GameFragment1SubcomponentImpl(arg0);
    }
  }

  private final class GameFragment1SubcomponentImpl implements FragmentBindingModule_GameFragment1.GameFragment1Subcomponent {
    private GameFragment1SubcomponentImpl(GameFragment1 arg0) {

    }

    @Override
    public void inject(GameFragment1 arg0) {
      injectGameFragment1(arg0);
    }

    private GameFragment1 injectGameFragment1(GameFragment1 instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      BaseFragment_MembersInjector.injectErrorHandler(instance, DaggerAppComponent.this.providesErrorHandler$app_debugProvider.get());
      return instance;
    }
  }

  private final class GameFragment2SubcomponentFactory implements FragmentBindingModule_GameFragment2.GameFragment2Subcomponent.Factory {
    @Override
    public FragmentBindingModule_GameFragment2.GameFragment2Subcomponent create(
        GameFragment2 arg0) {
      Preconditions.checkNotNull(arg0);
      return new GameFragment2SubcomponentImpl(arg0);
    }
  }

  private final class GameFragment2SubcomponentImpl implements FragmentBindingModule_GameFragment2.GameFragment2Subcomponent {
    private GameFragment2SubcomponentImpl(GameFragment2 arg0) {

    }

    @Override
    public void inject(GameFragment2 arg0) {
      injectGameFragment2(arg0);
    }

    private GameFragment2 injectGameFragment2(GameFragment2 instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      BaseFragment_MembersInjector.injectErrorHandler(instance, DaggerAppComponent.this.providesErrorHandler$app_debugProvider.get());
      return instance;
    }
  }
}
