// Generated by Dagger (https://dagger.dev).
package com.example.triviaapp.di;

import com.example.triviaapp.repo.DatabaseRepository;
import com.example.triviaapp.repo.DatabaseRepositoryImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvidesDatabaseRepositoryFactory implements Factory<DatabaseRepository> {
  private final RepositoryModule module;

  private final Provider<DatabaseRepositoryImpl> databaseRepositoryProvider;

  public RepositoryModule_ProvidesDatabaseRepositoryFactory(RepositoryModule module,
      Provider<DatabaseRepositoryImpl> databaseRepositoryProvider) {
    this.module = module;
    this.databaseRepositoryProvider = databaseRepositoryProvider;
  }

  @Override
  public DatabaseRepository get() {
    return providesDatabaseRepository(module, databaseRepositoryProvider.get());
  }

  public static RepositoryModule_ProvidesDatabaseRepositoryFactory create(RepositoryModule module,
      Provider<DatabaseRepositoryImpl> databaseRepositoryProvider) {
    return new RepositoryModule_ProvidesDatabaseRepositoryFactory(module, databaseRepositoryProvider);
  }

  public static DatabaseRepository providesDatabaseRepository(RepositoryModule instance,
      DatabaseRepositoryImpl databaseRepository) {
    return Preconditions.checkNotNullFromProvides(instance.providesDatabaseRepository(databaseRepository));
  }
}
